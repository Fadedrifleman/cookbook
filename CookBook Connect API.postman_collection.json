{
	"info": {
		"_postman_id": "7ca8127a-2034-4c55-8890-b2b555c0f970",
		"name": "CookBook Connect API",
		"description": "A Postman collection for the CookBook Connect GraphQL API. \n\n**Setup Instructions:**\n1.  Set the `{{baseUrl}}` variable to `http://localhost:3000`.\n2.  Run the **Login** request and copy the `access_token`.\n3.  Set the `{{authToken}}` variable to the copied token.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20646827",
		"_collection_link": "https://fadedrifleman.postman.co/workspace/Team-Workspace~61db95e6-ae34-4c3f-8760-069b2c82b155/collection/20646827-7ca8127a-2034-4c55-8890-b2b555c0f970?action=share&source=collection_link&creator=20646827"
	},
	"item": [
		{
			"name": "User & Auth",
			"item": [
				{
					"name": "Register User",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation RegisterUser($email: String!, $username: String!, $password: String!) {\n  register(createUserInput: {email: $email, username: $username, password: $password}) {\n    id\n    username\n    email\n  }\n}",
								"variables": "{\n  \"email\": \"testuser2@example.com\",\n  \"username\": \"testuser2\",\n  \"password\": \"password123\"\n}"
							}
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Automatically set the authToken variable after login",
									"const response = pm.response.json();",
									"if (response.data && response.data.login && response.data.login.access_token) {",
									"    pm.collectionVariables.set(\"authToken\", response.data.login.access_token);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation LoginUser($username: String!, $password: String!) {\n  login(loginInput: {username: $username, password: $password}) {\n    access_token\n    user {\n      id\n      username\n    }\n  }\n}",
								"variables": "{\n    \"username\": \"testuser2\",\n    \"password\": \"password123\"\n}"
							}
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get My Profile",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query GetMyProfile {\n  me {\n    id\n    username\n    email\n  }\n}",
								"variables": "{}"
							}
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Profile",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query GetUserProfile($username: String!) {\n  userProfile(username: $username) {\n    id\n    username\n    followersCount\n    followingCount\n  }\n}",
								"variables": "{\n  \"username\": \"testuser\"\n}"
							}
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Following System",
			"item": [
				{
					"name": "Follow User",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation FollowUser($userId: ID!) {\n  follow(userIdToFollow: $userId) {\n    success\n    message\n  }\n}",
								"variables": "{\n  \"userId\": \"ID_OF_THE_USER_TO_FOLLOW\"\n}"
							}
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unfollow User",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation UnfollowUser($userId: ID!) {\n  unfollow(userIdToUnfollow: $userId) {\n    success\n    message\n  }\n}",
								"variables": "{\n  \"userId\": \"ID_OF_THE_USER_TO_UNFOLLOW\"\n}"
							}
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Recipes",
			"item": [
				{
					"name": "Create Recipe",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Automatically set the recipeId variable after creation",
									"const response = pm.response.json();",
									"if (response.data && response.data.createRecipe && response.data.createRecipe.id) {",
									"    pm.collectionVariables.set(\"recipeId\", response.data.createRecipe.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation CreateNewRecipe($input: CreateRecipeInput!) {\n  createRecipe(createRecipeInput: $input) {\n    id\n    title\n    description\n    author {\n      username\n    }\n  }\n}",
								"variables": "{\n  \"input\": {\n    \"title\": \"Postman Recipe\",\n    \"description\": \"A delicious recipe created via Postman.\",\n    \"cuisine\": \"API\",\n    \"difficulty\": \"Easy\",\n    \"cookingTime\": 10,\n    \"ingredients\": [\n      {\n        \"name\": \"JSON\",\n        \"quantity\": \"1 cup\"\n      }\n    ],\n    \"instructions\": [\n      {\n        \"stepNumber\": 1,\n        \"text\": \"Send the request.\"\n      }\n    ]\n  }\n}"
							}
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Single Recipe",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query GetSingleRecipe($recipeId: ID!) {\n  recipe(id: $recipeId) {\n    id\n    title\n    description\n  }\n}",
								"variables": "{\n  \"recipeId\": \"{{recipeId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Recipes",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query SearchByKeyword($input: SearchRecipesInput!) {\n  searchRecipes(searchRecipesInput: $input) {\n    id\n    title\n    description\n  }\n}",
								"variables": "{\n  \"input\": {\n    \"query\": \"postman\"\n  }\n}"
							}
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Comments",
			"item": [
				{
					"name": "Post a Comment",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation PostAComment($recipeId: ID!) {\n  createComment(createCommentInput: {recipeId: $recipeId, text: \"This is a comment from Postman!\"}) {\n    id\n    text\n  }\n}",
								"variables": "{\n  \"recipeId\": \"{{recipeId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "AI Enhancement",
			"item": [
				{
					"name": "Get Recipe Suggestions",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query GetAISuggestions($recipeId: ID!) {\n  getRecipeSuggestions(recipeId: $recipeId)\n}",
								"variables": "{\n  \"recipeId\": \"{{recipeId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{baseUrl}}/graphql",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000",
			"type": "string"
		},
		{
			"key": "authToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "recipeId",
			"value": "",
			"type": "string"
		}
	]
}