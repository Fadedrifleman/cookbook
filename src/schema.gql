# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Comment {
  createdAt: DateTime!
  id: ID!
  text: String!
  user: User!
}

input CreateCommentInput {
  recipeId: ID!
  text: String!
}

input CreateIngredientInput {
  name: String!
  quantity: String!
}

input CreateInstructionInput {
  stepNumber: Int!
  text: String!
}

input CreateRecipeInput {
  cookingTime: Int!
  cuisine: String!
  description: String
  difficulty: String!
  ingredients: [CreateIngredientInput!]!
  instructions: [CreateInstructionInput!]!
  title: String!
}

input CreateUserInput {
  email: String!
  password: String!
  username: String!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type FollowResponse {
  message: String
  success: Boolean!
}

type Ingredient {
  id: ID!
  name: String!
  quantity: String!
}

type Instruction {
  id: ID!
  stepNumber: Int!
  text: String!
}

input LoginInput {
  password: String!
  username: String!
}

type LoginResponse {
  access_token: String!
  user: User!
}

type Mutation {
  createComment(createCommentInput: CreateCommentInput!): Comment!
  createRecipe(createRecipeInput: CreateRecipeInput!): Recipe!
  follow(userIdToFollow: ID!): FollowResponse!
  login(loginInput: LoginInput!): LoginResponse!
  register(createUserInput: CreateUserInput!): User!
  removeRecipe(id: ID!): Recipe!
  unfollow(userIdToUnfollow: ID!): FollowResponse!
  updateRecipe(id: ID!, updateRecipeInput: UpdateRecipeInput!): Recipe!
}

type Query {
  getRecipeSuggestions(recipeId: ID!): String!
  hello: String!
  me: User!
  recipe(id: ID!): Recipe!
  recipes: [Recipe!]!
  searchRecipes(searchRecipesInput: SearchRecipesInput!): [RecipeSearchResult!]!
  userProfile(username: String!): UserProfile!
}

type Recipe {
  author: User!
  cookingTime: Int!
  createdAt: Timestamp!
  cuisine: String!
  description: String
  difficulty: String!
  id: ID!
  ingredients: [Ingredient!]!
  instructions: [Instruction!]!
  title: String!
}

type RecipeSearchResult {
  cookingTime: Int!
  cuisine: String!
  description: String
  difficulty: String!
  id: ID!
  title: String!
}

input SearchRecipesInput {
  """A list of ingredients the recipe must contain"""
  ingredients: [String!]

  """A general search term for title or description"""
  query: String
}

type Subscription {
  commentAdded(recipeId: ID!): Comment!
}

"""
`Date` type as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

input UpdateRecipeInput {
  cookingTime: Int
  cuisine: String
  description: String
  difficulty: String
  ingredients: [CreateIngredientInput!]
  instructions: [CreateInstructionInput!]
  title: String
}

type User {
  """User's email address"""
  email: String!

  """Unique identifier for the user"""
  id: ID!

  """Unique username for the user"""
  username: String!
}

type UserProfile {
  """The number of users following this user"""
  followersCount: Int!

  """The number of users this user is following"""
  followingCount: Int!
  id: ID!
  recipes: [Recipe]
  username: String!
}